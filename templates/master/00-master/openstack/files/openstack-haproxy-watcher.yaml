filesystem: "root"
mode: 0755
path: "/etc/kubernetes/static-pod-resources/haproxy/resources/haproxy-watcher.sh"
contents:
  inline: |
    #!/bin/bash
    update_cfg_and_restart() {
        CHANGED=$(diff /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.new)
        if [[ ! -f /etc/haproxy/haproxy.cfg ]] || [[ -n "$CHANGED" ]];
        then
            cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup || true
            cp /etc/haproxy/haproxy.cfg.new /etc/haproxy/haproxy.cfg
            echo "reload" | socat /var/run/haproxy/haproxy-master.sock -
        fi
    }

    # NOTE(mandre) this file is present on the first set of master nodes,
    # created during initial deployment. We're getting the $BOOTSTRAP_IP
    # variable from it.
    if [ -f /etc/kubernetes/static-pod-resources/clustervars ]; then
        source /etc/kubernetes/static-pod-resources/clustervars
    fi

    # FIXME(mandre) sometimes noticed it fails to talk to kube-api because the
    # certs are missing. Not sure if they're not created or deleted. We need to
    # find a more reliable way to query kube-api for nodes.
    # KNI gets the address of the master nodes by querying the SRV records for
    # "_etcd-server-ssl._tcp.$domain"
    # https://github.com/openshift-metal3/dev-scripts/blob/master/assets/files/etc/kubernetes/static-pod-resources/haproxy/utils.sh#L3
    export KUBECONFIG=/var/lib/kubelet/kubeconfig

    rules=$(iptables -L PREROUTING -n -t nat --line-numbers | awk '/OCP_API_LB_REDIRECT/ {print $1}'  | tac)
    if [[ -z "$rules" ]]; then
        # FIXME(mandre) Get the cluster CIDR block from the installer
        # This would be even better to put this rule directly in terraform or ignition
        iptables -t nat -I PREROUTING ! --src 172.30.0.0/16 --dst 0/0 -p tcp --dport "$api_port" -j REDIRECT --to-ports "$lb_port" -m comment --comment "OCP_API_LB_REDIRECT"
    fi

    TEMPLATE="{{`{{range .items}}{{\$addresses:=.status.addresses}}{{range .status.conditions}}{{if eq .type \"Ready\"}}{{if eq .status \"True\" }}{{range \$addresses}}{{if eq .type \"InternalIP\"}}{{.address}}{{end}}{{end}}{{end}}{{end}}{{end}} {{end}}`}}"
    while true; do
    MASTERS=
    WORKERS=
    MASTER_LINES=
    WORKER_LINES=
    if [ -f /var/lib/kubelet/pki/kubelet-client-current.pem ]; then
        MASTERS=$(/bin/oc get nodes -l node-role.kubernetes.io/master -ogo-template="$TEMPLATE")
        WORKERS=$(/bin/oc get nodes -l node-role.kubernetes.io/worker -ogo-template="$TEMPLATE")
    fi

    # FIXME(mandre) we shouldn't need to add boostrap node here
    # This should fix the back and forth between bootstrap and prod control plane
    if [[ -z "$MASTERS" ]];
    then
    cat > /etc/haproxy/haproxy.cfg.new << EOF
    listen {{.EtcdDiscoveryDomain}}-api-masters
        bind 0.0.0.0:7443
        mode tcp
        balance roundrobin
        server bootstrap-6443 $BOOTSTRAP_IP check port 6443
    EOF
        update_cfg_and_restart
        continue
    fi
    for master in $MASTERS;
    do
        MASTER_LINES="$MASTER_LINES
        server $master $master check port 6443"
    done
    cat > /etc/haproxy/haproxy.cfg.new << EOF
    listen {{.EtcdDiscoveryDomain}}-api-masters
        bind 0.0.0.0:7443
        mode tcp
        balance roundrobin$MASTER_LINES
    EOF
    if [[ -n "$WORKERS" ]]; then
    for worker in $WORKERS;
    do
        WORKER_LINES="$WORKER_LINES
        server $worker $worker check port 443"
    done
    cat >> /etc/haproxy/haproxy.cfg.new << EOF
    listen {{.EtcdDiscoveryDomain}}-api-workers
        bind 0.0.0.0:80
        bind 0.0.0.0:443
        mode tcp
        balance roundrobin$WORKER_LINES
    EOF
    fi
    update_cfg_and_restart
    # Wait for 2 min
    sleep 120
    done
